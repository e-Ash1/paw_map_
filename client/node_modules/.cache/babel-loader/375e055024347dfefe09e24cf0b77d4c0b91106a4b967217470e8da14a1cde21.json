{"ast":null,"code":"import { useState } from \"react\";\nimport { saveSearchQuery, fetchRecentSearches, deleteRecentSearchById } from \"../utils/searchHandler\";\nconst useSearch = (setMarkers, setAllMarkers, type, setLastSearch, setRecentSearches) => {\n  const fetchPlaces = async location => {\n    try {\n      const res = await fetch(`/api/places?location=${location.lat},${location.lng}&type=${type}&radius=5000`);\n      const data = await res.json();\n      setMarkers(data.results || []);\n      setAllMarkers(data.results || []);\n      const recent = await fetchRecentSearches();\n      setRecentSearches(recent);\n    } catch (error) {\n      console.error(\"❌ Error fetching places:\", error);\n    }\n  };\n  const handleRefetchSearch = async (searchType, location) => {\n    await fetchPlaces({\n      lat: location.coords.lat,\n      lng: location.coords.lng\n    });\n  };\n  const handlePlaceChanged = searchBox => {\n    if (!searchBox) return;\n    const place = searchBox.getPlace();\n    if (!place || !place.geometry || !place.geometry.location) return;\n    const location = {\n      lat: place.geometry.location.lat(),\n      lng: place.geometry.location.lng()\n    };\n    setLastSearch(place.formatted_address);\n    localStorage.setItem(\"lastSearch\", place.formatted_address);\n    fetchPlaces(location);\n  };\n  const deleteRecentSearch = async searchId => {\n    try {\n      await deleteRecentSearchById(searchId);\n      const updated = await fetchRecentSearches();\n      setRecentSearches(updated);\n    } catch (err) {\n      console.error(\"❌ Error deleting recent search:\", err);\n    }\n  };\n  return {\n    fetchPlaces,\n    handleRefetchSearch,\n    handlePlaceChanged,\n    deleteRecentSearch\n  };\n};\nexport default useSearch;","map":{"version":3,"names":["useState","saveSearchQuery","fetchRecentSearches","deleteRecentSearchById","useSearch","setMarkers","setAllMarkers","type","setLastSearch","setRecentSearches","fetchPlaces","location","res","fetch","lat","lng","data","json","results","recent","error","console","handleRefetchSearch","searchType","coords","handlePlaceChanged","searchBox","place","getPlace","geometry","formatted_address","localStorage","setItem","deleteRecentSearch","searchId","updated","err"],"sources":["/home/eashr/pet-resources-app/client/src/hooks/useSearch.jsx"],"sourcesContent":["import { useState } from \"react\";\nimport {\n  saveSearchQuery,\n  fetchRecentSearches,\n  deleteRecentSearchById,\n} from \"../utils/searchHandler\";\n\nconst useSearch = (\n  setMarkers,\n  setAllMarkers,\n  type,\n  setLastSearch,\n  setRecentSearches\n) => {\n  const fetchPlaces = async (location) => {\n    try {\n      const res = await fetch(\n        `/api/places?location=${location.lat},${location.lng}&type=${type}&radius=5000`\n      );\n      const data = await res.json();\n\n      setMarkers(data.results || []);\n      setAllMarkers(data.results || []);\n\n      const recent = await fetchRecentSearches();\n      setRecentSearches(recent);\n    } catch (error) {\n      console.error(\"❌ Error fetching places:\", error);\n    }\n  };\n\n  const handleRefetchSearch = async (searchType, location) => {\n    await fetchPlaces({ lat: location.coords.lat, lng: location.coords.lng });\n  };\n\n  const handlePlaceChanged = (searchBox) => {\n    if (!searchBox) return;\n    const place = searchBox.getPlace();\n    if (!place || !place.geometry || !place.geometry.location) return;\n\n    const location = {\n      lat: place.geometry.location.lat(),\n      lng: place.geometry.location.lng(),\n    };\n\n    setLastSearch(place.formatted_address);\n    localStorage.setItem(\"lastSearch\", place.formatted_address);\n    fetchPlaces(location);\n  };\n\n  const deleteRecentSearch = async (searchId) => {\n    try {\n      await deleteRecentSearchById(searchId);\n      const updated = await fetchRecentSearches();\n      setRecentSearches(updated);\n    } catch (err) {\n      console.error(\"❌ Error deleting recent search:\", err);\n    }\n  };\n\n  return {\n    fetchPlaces,\n    handleRefetchSearch,\n    handlePlaceChanged,\n    deleteRecentSearch,\n  };\n};\n\nexport default useSearch;\n"],"mappings":"AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,SACEC,eAAe,EACfC,mBAAmB,EACnBC,sBAAsB,QACjB,wBAAwB;AAE/B,MAAMC,SAAS,GAAGA,CAChBC,UAAU,EACVC,aAAa,EACbC,IAAI,EACJC,aAAa,EACbC,iBAAiB,KACd;EACH,MAAMC,WAAW,GAAG,MAAOC,QAAQ,IAAK;IACtC,IAAI;MACF,MAAMC,GAAG,GAAG,MAAMC,KAAK,CACrB,wBAAwBF,QAAQ,CAACG,GAAG,IAAIH,QAAQ,CAACI,GAAG,SAASR,IAAI,cACnE,CAAC;MACD,MAAMS,IAAI,GAAG,MAAMJ,GAAG,CAACK,IAAI,CAAC,CAAC;MAE7BZ,UAAU,CAACW,IAAI,CAACE,OAAO,IAAI,EAAE,CAAC;MAC9BZ,aAAa,CAACU,IAAI,CAACE,OAAO,IAAI,EAAE,CAAC;MAEjC,MAAMC,MAAM,GAAG,MAAMjB,mBAAmB,CAAC,CAAC;MAC1CO,iBAAiB,CAACU,MAAM,CAAC;IAC3B,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;IAClD;EACF,CAAC;EAED,MAAME,mBAAmB,GAAG,MAAAA,CAAOC,UAAU,EAAEZ,QAAQ,KAAK;IAC1D,MAAMD,WAAW,CAAC;MAAEI,GAAG,EAAEH,QAAQ,CAACa,MAAM,CAACV,GAAG;MAAEC,GAAG,EAAEJ,QAAQ,CAACa,MAAM,CAACT;IAAI,CAAC,CAAC;EAC3E,CAAC;EAED,MAAMU,kBAAkB,GAAIC,SAAS,IAAK;IACxC,IAAI,CAACA,SAAS,EAAE;IAChB,MAAMC,KAAK,GAAGD,SAAS,CAACE,QAAQ,CAAC,CAAC;IAClC,IAAI,CAACD,KAAK,IAAI,CAACA,KAAK,CAACE,QAAQ,IAAI,CAACF,KAAK,CAACE,QAAQ,CAAClB,QAAQ,EAAE;IAE3D,MAAMA,QAAQ,GAAG;MACfG,GAAG,EAAEa,KAAK,CAACE,QAAQ,CAAClB,QAAQ,CAACG,GAAG,CAAC,CAAC;MAClCC,GAAG,EAAEY,KAAK,CAACE,QAAQ,CAAClB,QAAQ,CAACI,GAAG,CAAC;IACnC,CAAC;IAEDP,aAAa,CAACmB,KAAK,CAACG,iBAAiB,CAAC;IACtCC,YAAY,CAACC,OAAO,CAAC,YAAY,EAAEL,KAAK,CAACG,iBAAiB,CAAC;IAC3DpB,WAAW,CAACC,QAAQ,CAAC;EACvB,CAAC;EAED,MAAMsB,kBAAkB,GAAG,MAAOC,QAAQ,IAAK;IAC7C,IAAI;MACF,MAAM/B,sBAAsB,CAAC+B,QAAQ,CAAC;MACtC,MAAMC,OAAO,GAAG,MAAMjC,mBAAmB,CAAC,CAAC;MAC3CO,iBAAiB,CAAC0B,OAAO,CAAC;IAC5B,CAAC,CAAC,OAAOC,GAAG,EAAE;MACZf,OAAO,CAACD,KAAK,CAAC,iCAAiC,EAAEgB,GAAG,CAAC;IACvD;EACF,CAAC;EAED,OAAO;IACL1B,WAAW;IACXY,mBAAmB;IACnBG,kBAAkB;IAClBQ;EACF,CAAC;AACH,CAAC;AAED,eAAe7B,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}