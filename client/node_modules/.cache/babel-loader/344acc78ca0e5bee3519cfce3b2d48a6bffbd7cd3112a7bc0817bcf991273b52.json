{"ast":null,"code":"import { saveSearchQuery, fetchRecentSearches } from \"../utils/searchHandler\";\nconst useSearch = (setMarkers, setAllMarkers, type, setLastSearch, setRecentSearches) => {\n  const fetchPlaces = async location => {\n    try {\n      const res = await fetch(`/api/places?location=${location.lat},${location.lng}&type=${type}&radius=5000`);\n      const data = await res.json();\n      setMarkers(data.results || []);\n      setAllMarkers(data.results || []);\n      const formattedLocation = {\n        origin: {\n          lat: location.lat,\n          lng: location.lng\n        },\n        destination: {}\n      };\n      await saveSearchQuery(type, data.results, formattedLocation);\n      const updated = await fetchRecentSearches();\n      setRecentSearches(updated);\n    } catch (error) {\n      console.error(\"❌ Error fetching places:\", error);\n    }\n  };\n  const handleRefetchSearch = async (searchType, location) => {\n    await fetchPlaces({\n      lat: location.coords.lat,\n      lng: location.coords.lng\n    });\n  };\n  return {\n    fetchPlaces,\n    handleRefetchSearch\n  };\n};\nexport default useSearch;","map":{"version":3,"names":["saveSearchQuery","fetchRecentSearches","useSearch","setMarkers","setAllMarkers","type","setLastSearch","setRecentSearches","fetchPlaces","location","res","fetch","lat","lng","data","json","results","formattedLocation","origin","destination","updated","error","console","handleRefetchSearch","searchType","coords"],"sources":["/home/eashr/pet-resources-app/client/src/hooks/useSearch.jsx"],"sourcesContent":["import { saveSearchQuery, fetchRecentSearches } from \"../utils/searchHandler\";\n\nconst useSearch = (\n  setMarkers,\n  setAllMarkers,\n  type,\n  setLastSearch,\n  setRecentSearches\n) => {\n  const fetchPlaces = async (location) => {\n    try {\n      const res = await fetch(\n        `/api/places?location=${location.lat},${location.lng}&type=${type}&radius=5000`\n      );\n      const data = await res.json();\n      setMarkers(data.results || []);\n      setAllMarkers(data.results || []);\n\n      const formattedLocation = {\n        origin: { lat: location.lat, lng: location.lng },\n        destination: {},\n      };\n\n      await saveSearchQuery(type, data.results, formattedLocation);\n      const updated = await fetchRecentSearches();\n      setRecentSearches(updated);\n    } catch (error) {\n      console.error(\"❌ Error fetching places:\", error);\n    }\n  };\n\n  const handleRefetchSearch = async (searchType, location) => {\n    await fetchPlaces({ lat: location.coords.lat, lng: location.coords.lng });\n  };\n\n  return {\n    fetchPlaces,\n    handleRefetchSearch,\n  };\n};\n\nexport default useSearch;\n"],"mappings":"AAAA,SAASA,eAAe,EAAEC,mBAAmB,QAAQ,wBAAwB;AAE7E,MAAMC,SAAS,GAAGA,CAChBC,UAAU,EACVC,aAAa,EACbC,IAAI,EACJC,aAAa,EACbC,iBAAiB,KACd;EACH,MAAMC,WAAW,GAAG,MAAOC,QAAQ,IAAK;IACtC,IAAI;MACF,MAAMC,GAAG,GAAG,MAAMC,KAAK,CACrB,wBAAwBF,QAAQ,CAACG,GAAG,IAAIH,QAAQ,CAACI,GAAG,SAASR,IAAI,cACnE,CAAC;MACD,MAAMS,IAAI,GAAG,MAAMJ,GAAG,CAACK,IAAI,CAAC,CAAC;MAC7BZ,UAAU,CAACW,IAAI,CAACE,OAAO,IAAI,EAAE,CAAC;MAC9BZ,aAAa,CAACU,IAAI,CAACE,OAAO,IAAI,EAAE,CAAC;MAEjC,MAAMC,iBAAiB,GAAG;QACxBC,MAAM,EAAE;UAAEN,GAAG,EAAEH,QAAQ,CAACG,GAAG;UAAEC,GAAG,EAAEJ,QAAQ,CAACI;QAAI,CAAC;QAChDM,WAAW,EAAE,CAAC;MAChB,CAAC;MAED,MAAMnB,eAAe,CAACK,IAAI,EAAES,IAAI,CAACE,OAAO,EAAEC,iBAAiB,CAAC;MAC5D,MAAMG,OAAO,GAAG,MAAMnB,mBAAmB,CAAC,CAAC;MAC3CM,iBAAiB,CAACa,OAAO,CAAC;IAC5B,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;IAClD;EACF,CAAC;EAED,MAAME,mBAAmB,GAAG,MAAAA,CAAOC,UAAU,EAAEf,QAAQ,KAAK;IAC1D,MAAMD,WAAW,CAAC;MAAEI,GAAG,EAAEH,QAAQ,CAACgB,MAAM,CAACb,GAAG;MAAEC,GAAG,EAAEJ,QAAQ,CAACgB,MAAM,CAACZ;IAAI,CAAC,CAAC;EAC3E,CAAC;EAED,OAAO;IACLL,WAAW;IACXe;EACF,CAAC;AACH,CAAC;AAED,eAAerB,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}