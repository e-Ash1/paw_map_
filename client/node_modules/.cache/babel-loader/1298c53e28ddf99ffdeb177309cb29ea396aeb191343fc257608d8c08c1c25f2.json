{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport { deleteRecentSearchById, fetchRecentSearches } from \"../utils/searchHandler\";\nconst useSearch = (setMarkers, setAllMarkers, type, setLastSearch, setRecentSearches, setCenter) => {\n  _s();\n  // Adds a loading state for skeletons\n  const [loading, setLoading] = useState(false);\n\n  // Fetches a list of nearby places\n  const fetchPlaces = async location => {\n    setLoading(true);\n    try {\n      const res = await fetch(`/api/places?location=${location.lat},${location.lng}&type=${type}&radius=5000`);\n      const data = await res.json();\n      setMarkers(data.results || []);\n      setAllMarkers(data.results || []);\n      setRecentSearches(await fetchRecentSearches());\n    } catch (error) {\n      console.error(\"❌ Error fetching places:\", error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Refetches the same search (e.g. from RecentSearches)\n  const handleRefetchSearch = async (unusedType, location) => {\n    setLoading(true);\n    try {\n      await fetchPlaces({\n        lat: location.coords.lat,\n        lng: location.coords.lng\n      });\n    } catch (error) {\n      console.error(\"❌ Error refetching places:\", error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Google-Places Autocomplete “place-changed” handler\n  const handlePlaceChanged = searchBox => {\n    var _place$geometry;\n    if (!searchBox) return;\n    const place = searchBox.getPlace();\n    if (!(place !== null && place !== void 0 && (_place$geometry = place.geometry) !== null && _place$geometry !== void 0 && _place$geometry.location)) return;\n    const location = {\n      lat: place.geometry.location.lat(),\n      lng: place.geometry.location.lng()\n    };\n    setCenter(location);\n    setLastSearch(place.formatted_address);\n    localStorage.setItem(\"lastSearch\", place.formatted_address);\n    fetchPlaces(location);\n  };\n\n  // Deletes a recent search and refresh the list\n  const deleteRecentSearch = async id => {\n    try {\n      await deleteRecentSearchById(id);\n      const updated = await fetchRecentSearches();\n      setRecentSearches(updated);\n    } catch (err) {\n      console.error(\"❌ Error deleting recent search:\", err);\n    }\n  };\n\n  // Refreshes the “Recent Searches” list\n  const refreshRecentSearches = async () => {\n    try {\n      const updated = await fetchRecentSearches();\n      setRecentSearches(updated);\n    } catch (err) {\n      console.error(\"❌ Failed to refresh recent searches:\", err);\n    }\n  };\n  return {\n    fetchPlaces,\n    handleRefetchSearch,\n    handlePlaceChanged,\n    deleteRecentSearch,\n    refreshRecentSearches,\n    loading\n  };\n};\n_s(useSearch, \"/Rjh5rPqCCqf0XYnTUk9ZNavw3Q=\");\nexport default useSearch;","map":{"version":3,"names":["useState","deleteRecentSearchById","fetchRecentSearches","useSearch","setMarkers","setAllMarkers","type","setLastSearch","setRecentSearches","setCenter","_s","loading","setLoading","fetchPlaces","location","res","fetch","lat","lng","data","json","results","error","console","handleRefetchSearch","unusedType","coords","handlePlaceChanged","searchBox","_place$geometry","place","getPlace","geometry","formatted_address","localStorage","setItem","deleteRecentSearch","id","updated","err","refreshRecentSearches"],"sources":["/home/eashr/pet-resources-app/client/src/hooks/useSearch.jsx"],"sourcesContent":["import { useState } from \"react\";\nimport { deleteRecentSearchById, fetchRecentSearches } from \"../utils/searchHandler\";\n\nconst useSearch = (\n  setMarkers,\n  setAllMarkers,\n  type,\n  setLastSearch,\n  setRecentSearches,\n  setCenter\n) => {\n  // Adds a loading state for skeletons\n  const [loading, setLoading] = useState(false);\n\n  // Fetches a list of nearby places\n  const fetchPlaces = async (location) => {\n    setLoading(true);\n    try {\n      const res = await fetch(\n        `/api/places?location=${location.lat},${location.lng}&type=${type}&radius=5000`\n      );\n      const data = await res.json();\n\n      setMarkers(data.results || []);\n      setAllMarkers(data.results || []);\n      setRecentSearches(await fetchRecentSearches());\n    } catch (error) {\n      console.error(\"❌ Error fetching places:\", error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Refetches the same search (e.g. from RecentSearches)\n  const handleRefetchSearch = async (unusedType, location) => {\n    setLoading(true);\n    try {\n      await fetchPlaces({ lat: location.coords.lat, lng: location.coords.lng });\n    } catch (error) {\n      console.error(\"❌ Error refetching places:\", error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Google-Places Autocomplete “place-changed” handler\n  const handlePlaceChanged = (searchBox) => {\n    if (!searchBox) return;\n    const place = searchBox.getPlace();\n    if (!place?.geometry?.location) return;\n\n    const location = {\n      lat: place.geometry.location.lat(),\n      lng: place.geometry.location.lng(),\n    };\n\n    setCenter(location);\n    setLastSearch(place.formatted_address);\n    localStorage.setItem(\"lastSearch\", place.formatted_address);\n\n    fetchPlaces(location);\n  };\n\n  // Deletes a recent search and refresh the list\n  const deleteRecentSearch = async (id) => {\n    try {\n      await deleteRecentSearchById(id);\n      const updated = await fetchRecentSearches();\n      setRecentSearches(updated);\n    } catch (err) {\n      console.error(\"❌ Error deleting recent search:\", err);\n    }\n  };\n\n  // Refreshes the “Recent Searches” list\n  const refreshRecentSearches = async () => {\n    try {\n      const updated = await fetchRecentSearches();\n      setRecentSearches(updated);\n    } catch (err) {\n      console.error(\"❌ Failed to refresh recent searches:\", err);\n    }\n  };\n\n  return {\n    fetchPlaces,\n    handleRefetchSearch,\n    handlePlaceChanged,\n    deleteRecentSearch,\n    refreshRecentSearches,\n    loading,\n  };\n};\n\nexport default useSearch;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}