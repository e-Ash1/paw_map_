{"ast":null,"code":"var _jsxFileName = \"/home/eashr/pet-resources-app/client/src/api/PetResources.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport MapWithAutocomplete from '../components/MapWithAutocomplete';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction PetResources() {\n  _s();\n  const [type, setType] = useState('veterinary_care');\n  const [places, setPlaces] = useState([]);\n  const [error, setError] = useState(null);\n  const handleSearch = async location => {\n    if (!location) return;\n    try {\n      const response = await axios.get('/api/places', {\n        params: {\n          location,\n          type,\n          radius: 5000\n        }\n      });\n      setPlaces(response.data.results || []);\n    } catch (error) {\n      console.error('Error fetching places:', error);\n      setError('Failed to fetch places. Please try again.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(MapWithAutocomplete, {\n    onSearch: handleSearch,\n    places: places\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 7\n  }, this);\n}\n_s(PetResources, \"a5u8H6pbXTMlfz5LOSN5cNNgpNw=\");\n_c = PetResources;\nexport default PetResources;\nvar _c;\n$RefreshReg$(_c, \"PetResources\");","map":{"version":3,"names":["React","useState","axios","MapWithAutocomplete","jsxDEV","_jsxDEV","PetResources","_s","type","setType","places","setPlaces","error","setError","handleSearch","location","response","get","params","radius","data","results","console","onSearch","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/eashr/pet-resources-app/client/src/api/PetResources.jsx"],"sourcesContent":["import React, { useState } from 'react';\nimport axios from 'axios';\nimport MapWithAutocomplete from '../components/MapWithAutocomplete';\n\nfunction PetResources() {\n  const [type, setType] = useState('veterinary_care');\n  const [places, setPlaces] = useState([]);\n  const [error, setError] = useState(null);\n\n  const handleSearch = async (location) => {\n    if (!location) return;\n\n    try {\n      const response = await axios.get('/api/places', {\n        params: {\n          location,\n          type,\n          radius: 5000,\n        },\n      });\n\n      setPlaces(response.data.results || []);\n    } catch (error) {\n      console.error('Error fetching places:', error);\n      setError('Failed to fetch places. Please try again.');\n    }\n  };\n\n  return (\n      <MapWithAutocomplete onSearch={handleSearch} places={places} />\n  );\n}\n\nexport default PetResources;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,mBAAmB,MAAM,mCAAmC;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpE,SAASC,YAAYA,CAAA,EAAG;EAAAC,EAAA;EACtB,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGR,QAAQ,CAAC,iBAAiB,CAAC;EACnD,MAAM,CAACS,MAAM,EAAEC,SAAS,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACW,KAAK,EAAEC,QAAQ,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;EAExC,MAAMa,YAAY,GAAG,MAAOC,QAAQ,IAAK;IACvC,IAAI,CAACA,QAAQ,EAAE;IAEf,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMd,KAAK,CAACe,GAAG,CAAC,aAAa,EAAE;QAC9CC,MAAM,EAAE;UACNH,QAAQ;UACRP,IAAI;UACJW,MAAM,EAAE;QACV;MACF,CAAC,CAAC;MAEFR,SAAS,CAACK,QAAQ,CAACI,IAAI,CAACC,OAAO,IAAI,EAAE,CAAC;IACxC,CAAC,CAAC,OAAOT,KAAK,EAAE;MACdU,OAAO,CAACV,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAC9CC,QAAQ,CAAC,2CAA2C,CAAC;IACvD;EACF,CAAC;EAED,oBACIR,OAAA,CAACF,mBAAmB;IAACoB,QAAQ,EAAET,YAAa;IAACJ,MAAM,EAAEA;EAAO;IAAAc,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AAErE;AAACpB,EAAA,CA3BQD,YAAY;AAAAsB,EAAA,GAAZtB,YAAY;AA6BrB,eAAeA,YAAY;AAAC,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}